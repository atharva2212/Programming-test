#include <iostream>
struct Node {
    int data;
    Node* next;
    
    Node(int value) : data(value), next(nullptr) {}
};

class LinkedList {
public:
    Node* head;

    LinkedList() : head(nullptr) {}

    void append(int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = newNode;
        } else {
            Node* lastNode = head;
            while (lastNode->next) {
                lastNode = lastNode->next;
            }
            lastNode->next = newNode;
        }
    }
};

LinkedList copyEvenNodes(const LinkedList& originalList) {
    LinkedList newList;
    Node* currentNode = originalList.head;

    while (currentNode) {
        if (currentNode->data % 2 == 0) {
            newList.append(currentNode->data);
        }
        currentNode = currentNode->next;
    }

    return newList;
}

void displayList(const LinkedList& list) {
    Node* current = list.head;
    while (current) {
        std::cout << current->data << " -> ";
        current = current->next;
    }
    std::cout << "nullptr" << std::endl;
}

int main() {
    LinkedList originalList;
    originalList.append(1);
    originalList.append(2);
    originalList.append(3);
    originalList.append(4);
    originalList.append(5);

    std::cout << "Original List: ";
    displayList(originalList);

    LinkedList evenList = copyEvenNodes(originalList);

    std::cout << "Even List: ";
    displayList(evenList);

    return 0;
}
